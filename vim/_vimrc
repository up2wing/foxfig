" Modeline and Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
"=============================================
" Author: WangYi
" Version: 1
" Email: up2wing@gmail.com
" ReadMe: README.md
" Sections:

" }

" Platform {
        "------------------------------- {
        "          Platform
        "-------------------------------
        if(has("win32") || has("win95") || has("win64") || has("win16"))
            let g:iswindows=1
        else
            let g:iswindows=0
        endif

        function! SwitchToBuf(filename)
            "let fullfn = substitute(a:filename, "^\\~/", $HOME . "/", "")
            " find in current tab
            let bufwinnr = bufwinnr(a:filename)
            if bufwinnr != -1
                exec bufwinnr . "wincmd w"
                return
            else
                " find in each tab
                tabfirst
                let tab = 1
                while tab <= tabpagenr("$")
                    let bufwinnr = bufwinnr(a:filename)
                    if bufwinnr != -1
                        exec "normal " . tab . "gt"
                        exec bufwinnr . "wincmd w"
                        return
                    endif
                    tabnext
                    let tab = tab + 1
                endwhile
                " not exist, new tab
                exec "tabnew " . a:filename
            endif
        endfunction
    " }
" }

" Common Setting {
    "用空格键来开关折叠 {
        "nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
        "仿照emacs滚动
        nmap <C-n> <C-e>
        nmap <C-p> <C-y>
        " 定义快捷键到行首和行尾
        nmap lb 0
        nmap lr $
        nmap le ^
        nmap lt %
        nmap lf *
        nmap ld #
        " 设置快捷键将选中文本块复制至系统剪贴板
        vnoremap <Leader>y "+y
        " 设置快捷键将系统剪贴板内容粘贴至 vim
        "nmap <Leader>p "+p
 
        "粘贴时不会自动缩进，以免格式错乱. 在粘贴前按下F8,粘贴后再次按下F8
        set pastetoggle=<F8>
    " }

    " history存储长度。{
        set history=2000
    " }

    " 文件类型 {
        filetype on                "检测文件类型
        filetype indent on         "针对不同的文件类型采用不同的缩进格式
        filetype plugin on         "允许插件
        filetype plugin indent on  "启动自动补全
    " }

    " 折叠{
        set foldenable          " 开始折叠
        set foldmethod=indent   " 设置折叠方式(indent\syntax\marker\expr)
        set foldcolumn=0        " 设置折叠区域的宽度
        setlocal foldlevel=1    " 设置折叠层数为
        set foldlevelstart=99   " 打开文件是默认不折叠代码
        "set foldclose=all      " 设置为自动关闭折叠
    " }

    " 其它 {
        syntax on          "打开高亮
        set hlsearch       "高亮显示结果
        set incsearch      "在输入要搜索的文字时，vim会实时匹配
        set ignorecase     " 搜索时忽略大小写
        set showmatch      " 显示括号配对情况
        set mat=2          " How many tenths of a second to blink when matching brackets
        set number         " 显示行号
        set title          " change the terminal's title
        set novisualbell   " don't beep
        set noerrorbells   " don't beep
        set vb t_vb=       "去掉错误声音

        let mapleader = ","     "Set mapleader

        set tabstop=4           " 设置Tab键的宽度        [等同的空格个数]
        set shiftwidth=4   "自动缩进的宽度
        set softtabstop=4       " 按退格键时可以一次删掉 4 个空格
        set smarttab            " insert tabs on the start of a line according to shiftwidth, not tabstop 按退格键时可以一次删掉 4 个空格
        set expandtab      "用空格代替tab

        set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'
        set smartindent          "Smart indent
        set autoindent           " always set autoindenting on
        " never add copyindent, case error   " copy the previous indentation on autoindenting

        "set nobackup          "不生成~备份文件(gvim需要同时修改vimrc_example.vim)
        if g:iswindows==0
        set backup
            set backupdir=$VIMRUNTIME/vimbackupfile
        endif

        autocmd BufReadPost * exe "normal! g`\""

        set nocompatible      "关闭vi兼容模式，避免引发问题
        set autoread          " 文件修改之后自动载入。
        set noswapfile
        set cursorline        " 突出显示当前行

        "create undo file
        set undolevels=1000         " How many undos
        set undoreload=10000        " number of lines to save for undo

        set wildignore=*.swp,*.bak,*.pyc,*.class

        set ruler                 "显示当前的行号列号：
        set showcmd               "在状态栏显示正在输入的命令
        set showmode              " Show current mode

        set scrolloff=7          "j/k 上下滚动,始终在中间

        "insert mode shortcut
        inoremap <C-f> <Right>
        inoremap <C-b> <Left>

        "set winwidth=79

        " 命令行（在状态行下）的高度，默认为1，这里是2
        set statusline=%<%f\ %h%m%r%=%k[%{(&fenc==\"\")?&enc:&fenc}%{(&bomb?\",BOM\":\"\")}]\ %-14.(%l,%c%V%)\ %P
        " Always show the status line
        set laststatus=2

    " }

    " 字体及外观 {
        set guifont=Bitstream_Vera_Sans_Mono:h9.5:cANSI      "字体设置为Bitstream

        set guioptions-=m               "把gui的菜单栏去掉
        set guioptions-=T               "去掉工具栏
        autocmd GUIEnter * simalt ~x    "启动时最大化

        "下面的设置避免vim中文出现乱码
        set encoding=utf-8
        set fileencodings=utf-8,chinese,latin-1
        if has("win32")
        set fileencoding=chinese
        else
        set fileencoding=utf-8
        endif
        "解决菜单乱码
        source $VIMRUNTIME/delmenu.vim
        source $VIMRUNTIME/menu.vim
        "解决consle输出乱码
        " language messages zh_CN.utf-8
    " }

    "Fast edit vimrc {
        if g:iswindows==0
            "Fast reloading of the .vimrc
            map <silent> <leader>ss :source ~/.vimrc<cr>
            "Fast editing of .vimrc
            map <silent> <leader>ee :call SwitchToBuf("~/.vimrc")<cr>
            "When .vimrc is edited, reload it
            autocmd! bufwritepost .vimrc source ~/.vimrc
        elseif g:iswindows==1
            " Set helplang
            set helplang=cn
            "Fast reloading of the _vimrc
            map <silent> <leader>ss :source ~/_vimrc<cr>
            "Fast editing of _vimrc
            map <silent> <leader>ee :call SwitchToBuf("~/_vimrc")<cr>
            "When _vimrc is edited, reload it
            autocmd! bufwritepost _vimrc source ~/_vimrc
        endif
    " }
" }

" Vundle {
    set nocompatible               " be iMproved
    filetype off                   " required!

    " 此处规定Vundle的路径
    if(g:iswindows==0)
        set rtp+=~/.vim/bundle/vundle/
        call vundle#rc()
    else
        set rtp+=$VIM/vimfiles/bundle/vundle/
        call vundle#rc('$VIM/vimfiles/bundle/')
    endif

    " original repos on github
    " github上的用户写的插件，使用这种用户名+repo名称的方式
    Bundle 'gmarik/vundle'
    " vimscripts的repo使用下面的格式，直接是插件名称
    "Bundle 'taglist.vim'
" }

" 颜色主题 {
    Bundle 'altercation/vim-colors-solarized'
    Bundle 'vim-scripts/Lucius'
    "Bundle 'tomasr/molokai'
    set t_Co=256
    set background=dark
    if !has('gui_running')
        let g:solarized_termcolors=&t_Co
        let g:solarized_termtrans=1
    endif
    colorscheme solarized     "darkburn     "设置颜色主题
    let g:solarized_termtrans=1
    let g:solarized_contrast="normal"
    let g:solarized_visibility="normal"
    :nnoremap <F5> "=strftime("%F")<CR>gP"

    " c++ syntax highlight
"    Bundle 'octol/vim-cpp-enhanced-highlight'
    "Bundle 'vim-scripts/STL-Syntax'
"}

" 导航 {
    "目录导航
    Bundle 'scrooloose/nerdtree'
    map <leader>t :NERDTreeToggle<CR>
    let NERDTreeHighlightCursorline=1
    let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
    let g:netrw_home='~/bak'
    let NERDTreeWinPos=1
    "close vim if the only window left open is a NERDTree
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
"}

" grep{
Bundle 'vim-scripts/grep.vim'
nnoremap <silent> <F3> :Grep<CR>
"}

" Easygrep{
Bundle 'dkprice/vim-easygrep'
let g:EasyGrepFilesToExclude=".svn,.git,tags,cscope.*,*.o,*.swp,*.out,c.vim"
"}

"创建新文件时自动添加文件注释
autocmd BufNewFile *.[ch],*.hpp,*.cpp,*.py,*.sh exec ":call SetComment()"
function! SetComment()
    call setline(1,"/*===============================================================")
    call append(line("."),   "*   Copyright (C) ".strftime("%Y")." All rights reserved.")
    call append(line(".")+1, "*   ")
    call append(line(".")+2, "*   FileName：".expand("%:t"))
    call append(line(".")+3, "*   Author：WangYi")
    call append(line(".")+4, "*   Date： ".strftime("%Y-%m-%d"))
    call append(line(".")+5, "*   Description：")
    call append(line(".")+6, "*")
    call append(line(".")+7, "================================================================*/")
endfunction

" 显示增强 {
"状态栏增强展示
Bundle 'Lokaltog/vim-powerline'
"if want to use fancy,need to add font patch -> git clone git://gist.github.com/1630581.git ~/.fonts/ttf-dejavu-powerline
"let g:Powerline_symbols = 'fancy'
"let g:Powerline_symbols = 'unicode'

Bundle 'vim-scripts/Mark--Karkat'
nmap <M-j> <leader>m
nmap <esc>j <leader>m

"代码排版缩进标识
Bundle 'Yggdroot/indentLine'
let g:indentLine_noConcealCursor = 1
let g:indentLine_color_term = 0
let g:indentLine_char = '|'
let g:indentLine_setConceal = 0
let g:vim_json_syntax_conceal = 0

"for show no user whitespaces
Bundle 'bronson/vim-trailing-whitespace'
map <leader><space> :FixWhitespace<cr>
" }

" 快速移动 {
"更高效的移动 ,, + w/fx
Bundle 'Lokaltog/vim-easymotion'
map <leader>w <Plug>(easymotion-w)
map <leader>b <Plug>(easymotion-b)
Bundle 'vim-scripts/matchit.zip'
" }

" 快速插入代码片段 {
"Bundle 'vim-scripts/UltiSnips'
"Bundle 'SirVer/ultisnips'
"let g:UltiSnipsExpandTrigger = "<tab>"
"let g:UltiSnipsJumpForwardTrigger = "<tab>"
""定义存放代码片段的文件夹 .vim/snippets下，使用自定义和默认的，将会的到全局，有冲突的会提示
"let g:UltiSnipsSnippetDirectories=["snippets", "bundle/UltiSnips/UltiSnips"]
"}

" 快速加入修改环绕字符 {
"Bundle 'tpope/vim-surround'
""for repeat -> enhance surround.vim, . to repeat command
"Bundle 'tpope/vim-repeat'
"}

"自动补全单引号，双引号等 {
Bundle 'Raimondi/delimitMate'
" for python docstring ",优化输入
au FileType python let b:delimitMate_nesting_quotes = ['"']
" }

"for Markdown preview {
Plugin 'iamcco/markdown-preview.vim'
let g:mkdp_path_to_chrome = "C:/Program\ Files\ (x86)/Google/Chrome/Application/chrome.exe"
" }

"QuickFix Toggle {
Bundle 'vim-scripts/QFixToggle'
nnoremap <silent> <leader>sf :QFix<CR>
nmap <F4> :cn<cr>
nmap <F3> :cp<cr>
"}"

" 具体语言语法高亮 {
" for python.vim syntax highlight
Bundle 'hdima/python-syntax'
let python_highlight_all = 1


" session manager {
Bundle 'vim-scripts/sessionman.vim'
" autocmd VimEnter * call EnterSessionList()
" autocmd VimLeave * call SaveSession()
function! EnterSessionList()
    silent! execute "SessionList"
endfunction
function! SaveSession()
    silent! execute "SessionSave"
endfunction

map <silent> <F7> :SessionList<cr>
" }

" nerd commenter {
Bundle 'scrooloose/nerdcommenter'
let NERDShutUp=1
let g:NERDSpaceDelims=1
" }

" cscope {
Bundle 'vim-scripts/cscope.vim'
set csprg=/usr/bin/cscope
set csto=0
set cst
set nocsverb
cs add cscope.out
"----查找函数、宏、枚举等定义的位置: alt+g
"nmap <M-g> :cs find g <C-R>=expand("<cword>")<CR><CR>
"nmap <esc>g :cs find g <C-R>=expand("<cword>")<CR><CR>
"----查找函数定义:  alt+d.使用global，支持tab补全
"nmap <M-d> :cs f g 
"nmap <esc>d :cs f g 
nmap <M-w> :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <esc>w :cs find c <C-R>=expand("<cword>")<CR><CR>
""查找C语言符号，即查找函数名、宏、枚举值等出现的地方
"nmap <M-f> :cs find s <C-R>=expand("<cword>")<CR><CR>
"nmap <esc>f :cs find s <C-R>=expand("<cword>")<CR><CR>
""查找egrep模式，相当于egrep功能，但查找速度快多了
"nmap <C-@>e :cs find e <C-R>=expand("<cword>")<CR><CR>
""----查找指定的字符串:  alt+f
"nmap <C-@>s :cs find t <C-R>=expand("<cword>")<CR><CR>
""查找并打开文件，类似vim的find功能
"nmap <C-@>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
""查找包含本文件的文件
"nmap <C-@>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
""查找本函数调用的函数
"nmap <C-@>d :cs find d <C-R>=expand("<cword>")<CR><CR>
" }

" gtags {
Bundle 'vim-scripts/gtags.vim'
" }

" gtags {
Bundle 'neoclide/coc.nvim'
" if hidden is not set, TextEdit might fail.
set hidden
" don't give |ins-completion-menu| messages.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" GoTo code navigation.
nmap <silent> gi <Plug>(coc-definition)
" nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gy <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

nmap <M-l> :CocList symbols<CR>
nmap <esc>l :CocList symbols<CR>
" }


" LeaderF {
Bundle 'Yggdroot/LeaderF'
" nmap <silent> <Leader>f :Leaderf file<CR>
let g:Lf_Gtagsconf = '/usr/share/gtags/gtags.conf'
let g:Lf_CacheDirectory = '/data/leaderf'
let g:Lf_Gtagslabel = 'native-pygments'
let g:Lf_UseVersionControlTool = 0
let g:Lf_GtagsAutoGenerate = 1
" let g:Lf_UseCache = 0
let g:Lf_MaxCount = 0
" let g:Lf_ShortcutF = '<C-P>'
let g:Lf_PreviewInPopup = 1
nmap <Leader>p :Leaderf file<CR>
nmap <Leader>f :Leaderf mru<CR>
nmap <Leader>ss :Leaderf function<CR>
"----查找调用本函数的函数:  alt+s
nmap <M-s> :<C-U><C-R>=printf("Leaderf! gtags -r %s --auto-jump", expand("<cword>"))<CR><CR>
nmap <esc>s :<C-U><C-R>=printf("Leaderf! gtags -r %s --auto-jump", expand("<cword>"))<CR><CR>
"----查找函数、宏、枚举等定义的位置: alt+g
noremap <M-f> :<C-U><C-R>=printf("Leaderf! gtags -d %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <esc>f :<C-U><C-R>=printf("Leaderf! gtags -d %s --auto-jump", expand("<cword>"))<CR><CR>

"----列出所有符号：alt+d
nmap <M-d> :Leaderf gtags<CR>
nmap <esc>d :Leaderf gtags<CR>

"----查找下一个、上一个
noremap <leader>fn :<C-U><C-R>=printf("Leaderf gtags --next %s", "")<CR><CR>
noremap <leader>fp :<C-U><C-R>=printf("Leaderf gtags --previous %s", "")<CR><CR>
" }

" 标签导航 {
Bundle 'majutsushi/tagbar'
nmap <F9> :TagbarToggle<CR>
let g:tagbar_autofocus = 1
let g:tagbar_left = 1
let g:tagbar_sort = 0
" }

" Alternate 头文件切换 {
Bundle 'vim-scripts/a.vim'
" }

" OmniCppComplete {
"Bundle 'vim-scripts/OmniCppComplete'
"let OmniCpp_NamespaceSearch = 1
"let OmniCpp_GlobalScopeSearch = 1
"let OmniCpp_ShowAccess = 1
"let OmniCpp_ShowPrototypeInAbbr = 1 " 显示函数参数列表
"let OmniCpp_MayCompleteDot = 1   " 输入 .  后自动补全
"let OmniCpp_MayCompleteArrow = 1 " 输入 -> 后自动补全
"let OmniCpp_MayCompleteScope = 1 " 输入 :: 后自动补全
"let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
"" 自动关闭补全窗口
"au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
"set completeopt=menuone,menu,longest
" }

" lookupfile setting {
"Bundle 'vim-scripts/genutils'
"Bundle 'vim-scripts/lookupfile'
"let g:LookupFile_MinPatLength = 2
"let g:LookupFile_PreserveLastPattern = 0
"let g:LookupFile_PreservePatternHistory = 0
"let g:LookupFile_AlwaysAcceptFirst = 1
"let g:LookupFile_AllowNewFiles = 0
"let g:LookupFile_UsingSpecializedTags = 1
"let g:LookupFile_Bufs_LikeBufCmd = 0
"let g:LookupFile_ignorecase = 1
"let g:LookupFile_smartcase = 1
"if filereadable("./filenametag")
    "let g:LookupFile_TagExpr = '"./filenametags"'
"endif

"" lookup file with ignore case
"function! LookupFile_IgnoreCaseFunc(pattern)
    "let _tags = &tags
    "try
        "let &tags = eval(g:LookupFile_TagExpr)
        "let newpattern = '\c' . a:pattern
        "let tags = taglist(newpattern)
    "catch
        "echohl ErrorMsg | echo "Exception: " . v:exception | echohl NONE
        "return ""
    "finally
        "let &tags = _tags
    "endtry
    "" Show the matches for what is typed so far.
    "let files = map(tags, 'v:val["filename"]')
    "return files
"endfunction
"let g:LookupFile_LookupFunc = 'LookupFile_IgnoreCaseFunc'

""映射LookupFile为,lk-----搜索文件
"nmap <silent> <leader>lk :LUTags<cr>
""映射LUBufs为,ll------搜索Buffer
"nmap <silent> <leader>ll :LUBufs<cr>
""映射LUWalk为,lw-----搜索目录
"nmap <silent> <leader>lw :LUWalk<cr>
" }

" netrw setting {
"Bundle 'vim-scripts/netrw.vim'
"let g:netrw_winsize = 30
"" ,fe打开文件浏览器
"nmap <silent> <leader>fe :Sexplore!<cr>
" }

" BufExplorer {
"Bundle 'corntrace/bufexplorer'
"let g:bufExplorerDefaultHelp=0       " Do not show default help.
"let g:bufExplorerShowRelativePath=1  " Show relative paths.
"let g:bufExplorerSortBy='mru'        " Sort by most recently used.
"let g:bufExplorerSplitRight=0        " Split left.
"let g:bufExplorerSplitVertical=1     " Split vertically.
"let g:bufExplorerSplitVertSize = 30  " Split width
"let g:bufExplorerUseCurrentWindow=1  " Open in new window.
"autocmd BufWinEnter \[Buf\ List\] setl nonumber
" }

filetype plugin indent on     " vbundle required!

" Default settings {
set nocompatible
" For windows version
if g:iswindows==1
    source $VIMRUNTIME/vimrc_example.vim
    "source $VIMRUNTIME/mswin.vim
    behave mswin
endif

if g:iswindows==0
set backup
set backupdir=~/vimbackupfile
endif
" }
